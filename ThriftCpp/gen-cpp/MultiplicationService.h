/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MultiplicationService_H
#define MultiplicationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "multiply_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MultiplicationServiceIf {
 public:
  virtual ~MultiplicationServiceIf() {}
  virtual int32_t multiply(const int32_t n1, const int32_t n2) = 0;
};

class MultiplicationServiceIfFactory {
 public:
  typedef MultiplicationServiceIf Handler;

  virtual ~MultiplicationServiceIfFactory() {}

  virtual MultiplicationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MultiplicationServiceIf* /* handler */) = 0;
  };

class MultiplicationServiceIfSingletonFactory : virtual public MultiplicationServiceIfFactory {
 public:
  MultiplicationServiceIfSingletonFactory(const ::std::shared_ptr<MultiplicationServiceIf>& iface) : iface_(iface) {}
  virtual ~MultiplicationServiceIfSingletonFactory() {}

  virtual MultiplicationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(MultiplicationServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<MultiplicationServiceIf> iface_;
};

class MultiplicationServiceNull : virtual public MultiplicationServiceIf {
 public:
  virtual ~MultiplicationServiceNull() {}
  int32_t multiply(const int32_t /* n1 */, const int32_t /* n2 */) override {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _MultiplicationService_multiply_args__isset {
  _MultiplicationService_multiply_args__isset() : n1(false), n2(false) {}
  bool n1 :1;
  bool n2 :1;
} _MultiplicationService_multiply_args__isset;

class MultiplicationService_multiply_args {
 public:

  MultiplicationService_multiply_args(const MultiplicationService_multiply_args&) noexcept;
  MultiplicationService_multiply_args& operator=(const MultiplicationService_multiply_args&) noexcept;
  MultiplicationService_multiply_args() noexcept
                                      : n1(0),
                                        n2(0) {
  }

  virtual ~MultiplicationService_multiply_args() noexcept;
  int32_t n1;
  int32_t n2;

  _MultiplicationService_multiply_args__isset __isset;

  void __set_n1(const int32_t val);

  void __set_n2(const int32_t val);

  bool operator == (const MultiplicationService_multiply_args & rhs) const
  {
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    return true;
  }
  bool operator != (const MultiplicationService_multiply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiplicationService_multiply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MultiplicationService_multiply_pargs {
 public:


  virtual ~MultiplicationService_multiply_pargs() noexcept;
  const int32_t* n1;
  const int32_t* n2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MultiplicationService_multiply_result__isset {
  _MultiplicationService_multiply_result__isset() : success(false) {}
  bool success :1;
} _MultiplicationService_multiply_result__isset;

class MultiplicationService_multiply_result {
 public:

  MultiplicationService_multiply_result(const MultiplicationService_multiply_result&) noexcept;
  MultiplicationService_multiply_result& operator=(const MultiplicationService_multiply_result&) noexcept;
  MultiplicationService_multiply_result() noexcept
                                        : success(0) {
  }

  virtual ~MultiplicationService_multiply_result() noexcept;
  int32_t success;

  _MultiplicationService_multiply_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MultiplicationService_multiply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MultiplicationService_multiply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiplicationService_multiply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MultiplicationService_multiply_presult__isset {
  _MultiplicationService_multiply_presult__isset() : success(false) {}
  bool success :1;
} _MultiplicationService_multiply_presult__isset;

class MultiplicationService_multiply_presult {
 public:


  virtual ~MultiplicationService_multiply_presult() noexcept;
  int32_t* success;

  _MultiplicationService_multiply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MultiplicationServiceClient : virtual public MultiplicationServiceIf {
 public:
  MultiplicationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MultiplicationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t multiply(const int32_t n1, const int32_t n2) override;
  void send_multiply(const int32_t n1, const int32_t n2);
  int32_t recv_multiply();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MultiplicationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<MultiplicationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (MultiplicationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_multiply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MultiplicationServiceProcessor(::std::shared_ptr<MultiplicationServiceIf> iface) :
    iface_(iface) {
    processMap_["multiply"] = &MultiplicationServiceProcessor::process_multiply;
  }

  virtual ~MultiplicationServiceProcessor() {}
};

class MultiplicationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MultiplicationServiceProcessorFactory(const ::std::shared_ptr< MultiplicationServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< MultiplicationServiceIfFactory > handlerFactory_;
};

class MultiplicationServiceMultiface : virtual public MultiplicationServiceIf {
 public:
  MultiplicationServiceMultiface(std::vector<std::shared_ptr<MultiplicationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MultiplicationServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<MultiplicationServiceIf> > ifaces_;
  MultiplicationServiceMultiface() {}
  void add(::std::shared_ptr<MultiplicationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t multiply(const int32_t n1, const int32_t n2) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiply(n1, n2);
    }
    return ifaces_[i]->multiply(n1, n2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MultiplicationServiceConcurrentClient : virtual public MultiplicationServiceIf {
 public:
  MultiplicationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  MultiplicationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t multiply(const int32_t n1, const int32_t n2) override;
  int32_t send_multiply(const int32_t n1, const int32_t n2);
  int32_t recv_multiply(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
